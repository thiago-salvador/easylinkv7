// components/team-management-modal.tsx
"use client";

import { useState, useEffect, useCallback } from 'react';
import * as React from 'react';
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { UserPlus, Trash2, Crown, Check, Zap, Info, Trophy, CreditCard, Loader2, ArrowRight, X as CloseIcon } from "lucide-react";
import type { User as SupabaseUser } from '@supabase/supabase-js';
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { loadStripe } from '@stripe/stripe-js';
import { createClient } from '@/utils/supabase/client';

// Create Dialog components directly from Radix UI
const Dialog = DialogPrimitive.Root;
const DialogTrigger = DialogPrimitive.Trigger;
const DialogPortal = DialogPrimitive.Portal;
const DialogClose = DialogPrimitive.Close;
const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
));

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <CloseIcon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
);

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));

// Carrega Stripe
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);
import { UserPlus, Trash2, Crown, Check, Zap, Info, Trophy, CreditCard, Loader2, ArrowRight, X as CloseIcon } from "lucide-react";
import type { User as SupabaseUser } from '@supabase/supabase-js';
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { loadStripe } from '@stripe/stripe-js';
import { createClient } from '@/utils/supabase/client';

// Carrega Stripe
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!);

interface TeamManagementModalProps {
  user: SupabaseUser | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  currentPlan?: string;
  onUpgradeClick?: () => void; // Callback para abrir o modal de upgrade completo (opcional)
  showUpgradeView?: boolean; // Força a visualização de upgrade
  // members?: { id: string; email: string; role: 'owner' | 'member' }[]; // TODO: Receber membros reais
}

// Dados de exemplo para membros
const exampleMembers = [
    { id: '1', email: 'dono@exemplo.com', role: 'owner' as const },
    { id: '2', email: 'membro1@exemplo.com', role: 'member' as const },
];

// Planos que permitem gestão de equipa
const plansWithTeamFeature = ['pro', 'empresarial'];

// Features do plano Empresarial (ajuste conforme necessário)
const empresarialPlanFeatures = [
  "Projetos ativos ilimitados",
  "10 GB limite de conta",
  "500.000 visitantes /mês",
  "Adicionar membros da equipe",
  "Modo de feedback",
  "Captura de emails",
  "Todos os recursos do plano Pro",
];

// Detalhes do plano Empresarial para upgrade (SUBSTITUA OS PRICE IDs PELOS SEUS REAIS)
const empresarialPlanDetails = {
    name: "Empresarial",
    monthlyPriceBRL: 155,
    yearlyPriceBRL: 1860,
    monthlyPriceUSD: 31,
    yearlyPriceUSD: 372,
    yearlyDiscount: "2 meses grátis",
    currencySymbolBRL: "R$",
    currencySymbolUSD: "$",
    // SUBSTITUA PELOS SEUS PRICE IDs REAIS
    priceIdBRLMonthly: "price_1RJRrLGLj82qb9P7gwrVdBOf",
    priceIdUSDMonthly: "price_SUBSTITUA_EMP_USD_MENSAL",
    priceIdBRLYearly: "price_SUBSTITUA_EMP_BRL_ANUAL",
    priceIdUSDYearly: "price_SUBSTITUA_EMP_USD_ANUAL",
};


export function TeamManagementModal({
    user,
    open,
    onOpenChange,
    currentPlan = "Gratuito", // Default para Gratuito se não fornecido
    onUpgradeClick,
    showUpgradeView = false,
    // members = exampleMembers, // Usar estado local por enquanto
}: TeamManagementModalProps) {
  // Estados para a visualização de gerenciamento de equipe
  const [inviteEmail, setInviteEmail] = useState('');
  const [isInviting, setIsInviting] = useState(false);
  const [inviteError, setInviteError] = useState<string | null>(null);
  const [members, setMembers] = useState(exampleMembers); // Usar estado local para exemplo

  // Estados para a visualização de upgrade
  const [billingCycle, setBillingCycle] = useState<"monthly" | "yearly">("monthly");
  const [paymentMethod, setPaymentMethod] = useState<"card" | "paypal">("card");
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const [showDiscountField, setShowDiscountField] = useState(false);
  const [currency, setCurrency] = useState<"BRL" | "USD">("BRL"); // Moeda para upgrade

  // Verifica se a funcionalidade de equipa está disponível
  const isFeatureAvailable = plansWithTeamFeature.includes(currentPlan.toLowerCase()) && !showUpgradeView;

  // Lógica de Convite (Placeholder)
  const handleInvite = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault(); setIsInviting(true); setInviteError(null);
    console.log(`Tentando convidar: ${inviteEmail}`);
    await new Promise(resolve => setTimeout(resolve, 1000)); // Simula API
    setMembers(prev => [...prev, { id: Date.now().toString(), email: inviteEmail, role: "member" }]);
    setInviteEmail(''); setIsInviting(false);
    // TODO: Implementar API real e tratamento de erro
  };

  // Lógica de Remoção (Placeholder)
  const handleRemoveMember = (memberId: string) => {
     if (confirm("Tem certeza que deseja remover este membro?")) {
        console.log(`Removendo membro: ${memberId}`);
        setMembers(prev => prev.filter(m => m.id !== memberId));
        // TODO: Chamar API real
     }
  }

  // Lógica de Checkout (Placeholder)
  const handleUpgradeCheckout = async () => {
    setIsProcessingPayment(true); setPaymentError(null);
    let priceId: string | null = null;
    if (currency === "BRL") { priceId = billingCycle === 'monthly' ? empresarialPlanDetails.priceIdBRLMonthly : empresarialPlanDetails.priceIdBRLYearly; }
    else { priceId = billingCycle === 'monthly' ? empresarialPlanDetails.priceIdUSDMonthly : empresarialPlanDetails.priceIdUSDYearly; }

    if (!priceId || priceId.startsWith('price_SUBSTITUA')) { setPaymentError(`ID de Preço (Stripe) não configurado.`); setIsProcessingPayment(false); return; }
    console.log(`[Upgrade Checkout Empresarial] Iniciando para Price ID: ${priceId}`);
    try {
      const stripe = await stripePromise;
      if (!stripe) throw new Error('Stripe.js não carregou.');
      const response = await fetch('/api/create-checkout-session', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ priceId }), });
      const sessionData = await response.json();
      if (!response.ok || !sessionData.sessionId) throw new Error(sessionData.error || 'Falha ao criar sessão.');
      const { error: stripeError } = await stripe.redirectToCheckout({ sessionId: sessionData.sessionId });
      if (stripeError) throw new Error(stripeError.message || "Erro ao redirecionar.");
    } catch (err: any) { console.error("[Upgrade Checkout Empresarial] Erro:", err); setPaymentError(`Erro: ${err.message}`); setIsProcessingPayment(false); }
  };

  // Determina preço e texto de cobrança para exibição
  const displayPrice = currency === 'BRL' ? (billingCycle === 'monthly' ? empresarialPlanDetails.monthlyPriceBRL : empresarialPlanDetails.yearlyPriceBRL) : (billingCycle === 'monthly' ? empresarialPlanDetails.monthlyPriceUSD : empresarialPlanDetails.yearlyPriceUSD);
  const billingText = currency === 'BRL' ? (billingCycle === 'monthly' ? 'mensalmente' : 'anualmente') : (billingCycle === 'monthly' ? 'monthly' : 'annually');
  const currencySymbol = currency === 'BRL' ? empresarialPlanDetails.currencySymbolBRL : empresarialPlanDetails.currencySymbolUSD;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      {/* O conteúdo do modal é renderizado condicionalmente */}
      <DialogContent className={cn(
          "p-0 overflow-hidden rounded-lg", // Estilos base do DialogContent
          isFeatureAvailable ? "sm:max-w-lg" : "sm:max-w-[800px]" // Largura condicional
        )}>
        {isFeatureAvailable ? (
          // --- Visualização de Gerenciamento de Equipe ---
          <div className="p-6"> {/* Adiciona padding interno */}
            <DialogHeader>
              <DialogTitle className="text-xl font-semibold text-[#333333]">Gerenciar Time</DialogTitle>
              <DialogDescription className="text-sm text-muted-foreground">Convide e remova membros da sua equipa.</DialogDescription>
            </DialogHeader>
            {/* Formulário de Convite */}
            <form onSubmit={handleInvite} className="mt-4 space-y-3 border-b border-gray-200 pb-6 mb-6">
              <Label htmlFor="invite-email" className="text-[#333333] font-medium">Convidar novo membro</Label>
              <div className="flex gap-2">
                <Input id="invite-email" type="email" placeholder="email@exemplo.com" value={inviteEmail} onChange={(e) => setInviteEmail(e.target.value)} required disabled={isInviting} className="flex-1"/>
                <Button type="submit" disabled={isInviting} aria-label="Convidar membro" className="bg-gradient-to-r from-[#0070F3] to-[#00C2AE] hover:shadow-md transition-all duration-300">
                  {isInviting ? <Loader2 className="h-4 w-4 animate-spin" /> : <UserPlus className="h-4 w-4" />}
                  <span className="ml-2 hidden sm:inline">Convidar</span>
                </Button>
              </div>
              {inviteError && <p className="text-sm text-red-500">{inviteError}</p>}
            </form>
            {/* Lista de Membros */}
            <div className="space-y-4">
              <h4 className="text-sm font-medium text-[#777777]">Membros Atuais</h4>
              {members.length > 0 ? (
                <ul className="space-y-3 max-h-60 overflow-y-auto pr-2">
                  {members.map((member) => (
                    <li key={member.id} className="flex items-center justify-between gap-4 p-3 rounded-lg hover:bg-[#F3F4F6] transition-colors">
                      <div className="flex items-center gap-3">
                        <Avatar className="h-8 w-8"><AvatarFallback className="bg-gradient-to-r from-[#0070F3] to-[#00C2AE] text-white">{member.email[0].toUpperCase()}</AvatarFallback></Avatar>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium truncate text-[#333333]">{member.email}</p>
                          <p className="text-xs text-[#777777] capitalize flex items-center">
                            {member.role === "owner" && <Crown className="h-3 w-3 mr-1 text-[#F59E0B]" />} {member.role}
                          </p>
                        </div>
                      </div>
                      {member.role !== "owner" && (
                        <Button variant="ghost" size="icon" className="h-8 w-8 text-[#777777] hover:text-red-500 hover:bg-red-50" onClick={() => handleRemoveMember(member.id)} aria-label={`Remover ${member.email}`}>
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </li>
                  ))}
                </ul>
              ) : ( <p className="text-sm text-[#777777] text-center py-6 bg-[#F9FAFB] rounded-lg">Nenhum membro na equipe.</p> )}
            </div>
            <div className="mt-6 pt-4 border-t border-gray-200">
              <p className="text-xs text-[#777777]">Membros podem colaborar nos seus projetos.</p>
            </div>
          </div>
        ) : (
          // --- Visualização de Upgrade para Empresarial ---
          <div className="grid md:grid-cols-[minmax(0,_1fr)_1.5fr]">
            {/* Painel Esquerdo (Features) */}
            <div className="bg-gray-50 p-6 md:p-8 flex flex-col border-r">
               <DialogHeader className="mb-6">
                   <DialogTitle className="text-2xl font-bold text-gray-800">Upgrade para Empresarial</DialogTitle>
                   <DialogDescription className="text-sm text-muted-foreground pt-1">Ideal para freelancers, agências e empresas que precisam de mais.</DialogDescription>
               </DialogHeader>
               <div className="space-y-3 mb-8 flex-grow text-sm">
                   {empresarialPlanFeatures.map((feature, index) => (
                       <div key={index} className="flex items-start gap-2.5">
                           <Check className="w-4 h-4 text-green-500 flex-shrink-0 mt-0.5" />
                           <span className="text-gray-700">{feature}</span>
                           {/* Tooltip opcional */}
                           {feature.includes("membros da equipe") && ( <div className="relative group"><Info className="w-3.5 h-3.5 text-gray-400 cursor-help" />{/* ... tooltip ... */}</div> )}
                       </div>
                   ))}
               </div>
               {/* Link para comparar planos (opcional) */}
               {onUpgradeClick && (
                   <Button variant="link" className="p-0 h-auto text-primary text-sm self-start" onClick={onUpgradeClick}>
                       Comparar todos os planos <ArrowRight className="w-4 h-4 ml-1" />
                   </Button>
               )}
            </div>

            {/* Painel Direito (Pagamento) */}
            <div className="p-6 md:p-8 relative flex flex-col">
               <DialogClose asChild><Button variant="ghost" size="icon" className="absolute top-4 right-4 rounded-sm opacity-70"><CloseIcon className="h-4 w-4" /> <span className="sr-only">Fechar</span></Button></DialogClose>
              <div className="flex items-center justify-center gap-2 mb-5 text-xs text-amber-800 bg-amber-50 p-2 rounded-md border border-amber-200"><Trophy className="w-4 h-4 text-amber-600" /><span>Garantia de devolução do dinheiro em 7 dias</span></div>
              {/* Seleção Mensal/Anual */}
              <Tabs defaultValue="monthly" value={billingCycle} onValueChange={(value) => setBillingCycle(value as "monthly" | "yearly")} className="mb-4">
                <TabsList className="grid grid-cols-2 w-full h-11">
                  <TabsTrigger value="monthly">Mensal</TabsTrigger>
                  <TabsTrigger value="yearly">Anual</TabsTrigger>
                </TabsList>
                <TabsContent value="monthly" className="mt-3 text-center"><div className="text-3xl font-bold text-gray-900">{currencySymbol}{empresarialPlanDetails.monthlyPriceBRL}<span className="text-base font-normal text-gray-500"> /mês</span></div></TabsContent>
                <TabsContent value="yearly" className="mt-3 text-center"><div className="text-3xl font-bold text-gray-900">{currencySymbol}{empresarialPlanDetails.yearlyPriceBRL}<span className="text-base font-normal text-gray-500"> /ano</span></div>{empresarialPlanDetails.yearlyDiscount && <div className="text-xs text-primary font-medium mt-1">({empresarialPlanDetails.yearlyDiscount})</div>}</TabsContent>
              </Tabs>
              <p className="text-center text-xs text-muted-foreground mb-5">Você será cobrado {currencySymbol}{displayPrice} {billingText}.</p>
              {/* Seleção Método Pagamento e Formulário */}
              <Tabs defaultValue="card" value={paymentMethod} onValueChange={(value) => setPaymentMethod(value as "card" | "paypal")} className="mb-5">
                <TabsList className="grid grid-cols-2 w-full h-11 mb-4">
                    <TabsTrigger value="card" className="flex items-center gap-2 text-sm"><CreditCard className="w-4 h-4" /> Cartão</TabsTrigger>
                    <TabsTrigger value="paypal" className="flex items-center gap-2 text-sm" disabled><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M7.266 29.154..."/></svg> PayPal</TabsTrigger>
                </TabsList>
                <TabsContent value="card">
                  {/* Formulário Placeholder */}
                  <form onSubmit={handlePayment} className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1"><Label htmlFor="modal-firstName">Nome</Label><Input id="modal-firstName" placeholder="Seu nome" required disabled={isProcessingPayment} /></div>
                      <div className="space-y-1"><Label htmlFor="modal-lastName">Sobrenome</Label><Input id="modal-lastName" placeholder="Seu sobrenome" required disabled={isProcessingPayment} /></div>
                    </div>
                    <div className="space-y-1"><Label htmlFor="modal-cardNumber">Número do Cartão</Label><Input id="modal-cardNumber" placeholder="**** **** **** ****" required disabled={isProcessingPayment} /></div>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1"><Label htmlFor="modal-expiry">Validade</Label><Input id="modal-expiry" placeholder="MM/AA" required disabled={isProcessingPayment} /></div>
                      <div className="space-y-1"><Label htmlFor="modal-cvc">CVC</Label><Input id="modal-cvc" placeholder="123" required disabled={isProcessingPayment} /></div>
                    </div>
                    <Button type="button" variant="link" size="sm" className="p-0 h-auto text-xs" onClick={() => setShowDiscountField(!showDiscountField)}>Aplicar código de desconto?</Button>
                    {showDiscountField && <Input placeholder="Código de desconto" disabled={isProcessingPayment} />}
                    {/* O botão de pagar está fora deste form */}
                  </form>
                </TabsContent>
                <TabsContent value="paypal" className="text-center text-muted-foreground text-sm py-4">Pagamento via PayPal ainda não disponível.</TabsContent>
              </Tabs>
              {/* Botão de Pagamento */}
              <Button onClick={handleUpgradeCheckout} className="w-full bg-gradient-to-r from-[#F59E0B] to-[#FBBF24] text-white hover:opacity-90 mt-auto" disabled={isProcessingPayment || paymentMethod === 'paypal'}>
                 {isProcessingPayment ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                 Pagar {currencySymbol}{displayPrice} e Fazer Upgrade
              </Button>
              {paymentError && <p className="text-sm text-red-500 mt-2 text-center">{paymentError}</p>}
              <p className="text-xs text-muted-foreground text-center mt-4">Ao continuar, você aceita nossos <Link href="/termos" className="underline hover:text-primary">Termos</Link> e <Link href="/privacidade" className="underline hover:text-primary">Privacidade</Link>.</p>
            </div>
          </div>
        </DialogContent>
      )}
    </Dialog>
  );
}
